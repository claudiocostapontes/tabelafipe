# ===============================================
# CONFIGURAÇÕES DO SERVIDOR WEB
# ===============================================
# Porta onde a API-1 irá rodar
server.port=8080
# Nome da aplicaÃ§Ã£o (bom para logs e monitoramento)
spring.application.name=fipe-gateway-api


# ===============================================================
# CONFIGURAÇÃO DO BANCO DE DADOS POSTGRESQL
# ===============================================================

# URL de conexão. Note que o host é 'postgres-db', o nome do serviço no docker-compose.yml
spring.datasource.url=jdbc:postgresql://postgres-db:5432/${POSTGRES_DB}

# Usuário e senha lidos diretamente das variáveis de ambiente do .env
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

# Driver JDBC do PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# ===============================================================
# CONFIGURAÇÃO DO HIBERNATE (JPA)
# ===============================================================

# Estratégia de geração do banco. 'update' atualiza o schema sem apagar os dados.
spring.jpa.hibernate.ddl-auto=update

# Mostra no console os comandos SQL gerados pelo Hibernate. Ótimo para debug.
spring.jpa.show-sql=true

# Especifica o dialeto do PostgreSQL para o Hibernate se otimizar.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# ===============================================
# CONFIGURAÇÕES DA FILA (RABBITMQ)
# ===============================================
# 'rabbitmq' Ã© o nome do serviÃ§o no docker-compose.yml
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
# A RAH uma boa prática definir o nome da fila aqui para usar no código
queue.fipe.brand.name=fipe-brand-queue


# ===============================================
# CONFIGURAÇÕES DO CACHE (REDIS)
# ===============================================
# 'redis-cache' Ã© o nome do serviÃ§o no docker-compose.yml
spring.redis.host=redis-cache
spring.redis.port=6379


# ===============================================
# CONFIGURAÇÕES DE SEGURANÇA (JWT)
# ===============================================
# Coloque uma chave secreta longa e complexa aqui. Pode ser gerada online.
jwt.secret=SUA_CHAVE_SECRETA_SUPER_LONGA_E_SEGURA_AQUI_GERADA_COM_BASE64


# ===============================================
# CONFIGURAÇÕES DA DOCUMENTAÇÃO (SWAGGER/OPENAPI)
# ===============================================
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html