# ===============================================
# CONFIGURA��ES DO SERVIDOR
# ===============================================
# Mesmo sendo um worker, é bom ter uma porta definida para health checks.
# Usamos uma porta diferente para não haver conflito com a API-1.
server.port=8081
spring.application.name=fipe-worker-api


# ===============================================================
# CONFIGURA��O DO BANCO DE DADOS POSTGRESQL
# ===============================================================

# URL de conex�o. Note que o host � 'postgres-db', o nome do servi�o no docker-compose.yml
spring.datasource.url=jdbc:postgresql://postgres-db:5432/${POSTGRES_DB}

# Usu�rio e senha lidos diretamente das vari�veis de ambiente do .env
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

# Driver JDBC do PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# ===============================================================
# CONFIGURA��O DO HIBERNATE (JPA)
# ===============================================================

# Estrat�gia de gera��o do banco. 'update' atualiza o schema sem apagar os dados.
spring.jpa.hibernate.ddl-auto=update

# Mostra no console os comandos SQL gerados pelo Hibernate. �timo para debug.
spring.jpa.show-sql=true

# Especifica o dialeto do PostgreSQL para o Hibernate se otimizar.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# ===============================================
# CONFIGURA��ES DA FILA (RABBITMQ)
# ===============================================
# As configura��es de host s�o as mesmas.
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
# Nome da fila que o worker vai consumir.
queue.fipe.brand.name=fipe-brand-queue